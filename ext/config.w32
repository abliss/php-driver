// vim:ft=javascript

ARG_ENABLE("cassandra", "Enable DataStax PHP Cassandra extension", "no");
ARG_WITH("cassandra-cpp-driver", "Where to find DataStax C/C++ driver", "no");
ARG_WITH("libuv-libs", "Where to find libuv libraries", "no");
ARG_WITH("mpir", "Where to find MPIR (GNU MP)", "no");
ARG_WITH("zlib-libs", "Where to find zlib libraries (optional)", "no");

if (PHP_CASSANDRA != "no" &&
    PHP_CASSANDRA_CPP_DRIVER != "no" && PHP_LIBUV_LIBS != "no" && ADD_EXTENSION_DEP("cassandra", "openssl") &&
    PHP_MPIR != "no") {
  if (CHECK_LIB("cassandra_static.lib", "cassandra", PHP_CASSANDRA_CPP_DRIVER) &&
      CHECK_LIB("libuv.lib", "cassandra", PHP_LIBUV_LIBS) &&
      CHECK_LIB("psapi.lib", "cassandra") &&
      CHECK_LIB("iphlpapi.lib", "cassandra") &&
      CHECK_LIB("libeay32.lib", "cassandra") && CHECK_LIB("ssleay32.lib", "cassandra") &&
      CHECK_HEADER_ADD_INCLUDE("uv.h", "CFLAGS_CASSANDRA_CPP_DRIVER", PHP_LIBUV_LIBS + "/include") &&
      CHECK_HEADER_ADD_INCLUDE("cassandra.h", "CFLAGS_CASSANDRA_CPP_DRIVER", PHP_CASSANDRA_CPP_DRIVER + "/include")) {

    if (PHP_ZLIB_LIBS != "no") {
       if(CHECK_LIB("zlibstatic.lib", "cassandra", PHP_ZLIB_LIBS)) {
         // Ensure zlibstatic.lib is linked for all dependency extensions
         ADD_FLAG("LIBS", "zlibstatic.lib");
       } else {
         WARNING("Unable to locate zlib");
       }
    }

    AC_DEFINE("HAVE_CASSANDRA_CPP_DRIVER", PHP_CASSANDRA_CPP_DRIVER ? 0 : 1, "Have DataStax C/C++ driver");
    if (CHECK_LIB("mpir.lib", "cassandra", PHP_MPIR) &&
        CHECK_HEADER_ADD_INCLUDE("mpir.h", "CFLAGS_MPIR", PHP_MPIR + "/include")) {
      AC_DEFINE("HAVE_MPIR", PHP_MPIR ? 0 : 1, "Have MPIR");
      if (ADD_EXTENSION_DEP("cassandra", "spl")) {
        EXTENSION("cassandra", "php_cassandra.c");

        ADD_SOURCES(configure_module_dirname + "/src",
            "Cassandra.c", "cassandra");
        ADD_SOURCES(configure_module_dirname + "/src/Cassandra",
            "BatchStatement.c " +
            "Bigint.c " +
            "Blob.c " +
            "Cluster.c " +
            "Collection.c " +
            "Decimal.c " +
            "DefaultCluster.c " +
            "DefaultSession.c " +
            "Exception.c " +
            "ExecutionOptions.c " +
            "Float.c " +
            "Future.c " +
            "FutureClose.c " +
            "FuturePreparedStatement.c " +
            "FutureRows.c " +
            "FutureSession.c " +
            "FutureValue.c " +
            "Inet.c " +
            "Map.c " +
            "Numeric.c " +
            "PreparedStatement.c " +
            "Rows.c " +
            "Session.c " +
            "Set.c " +
            "SimpleStatement.c " +
            "SSLOptions.c " +
            "Statement.c " +
            "Timestamp.c " +
            "Timeuuid.c " +
            "Tuple.c " +
            "Uuid.c " +
            "UuidInterface.c " +
            "Varint.c", "cassandra");
        ADD_SOURCES(configure_module_dirname + "/src/Cassandra/Cluster",
            "Builder.c", "cassandra");
        ADD_SOURCES(configure_module_dirname + "/src/Cassandra/Exception",
            "AlreadyExistsException.c " +
            "AuthenticationException.c " +
            "ConfigurationException.c " +
            "DivideByZeroException.c " +
            "DomainException.c " +
            "ExecutionException.c " +
            "InvalidArgumentException.c " +
            "InvalidQueryException.c " +
            "InvalidSyntaxException.c " +
            "IsBootstrappingException.c " +
            "LogicException.c " +
            "OverloadedException.c " +
            "ProtocolException.c " +
            "RangeException.c " +
            "ReadTimeout.c " +
            "RuntimeException.c " +
            "ServerException.c " +
            "TimeoutException.c " +
            "TruncateException.c " +
            "UnauthorizedException.c " +
            "UnavailableException.c " +
            "UnpreparedException.c " +
            "ValidationException.c " +
            "WriteTimeoutException.c", "cassandra");
        ADD_SOURCES(configure_module_dirname + "/src/Cassandra/SSLOptions",
            "Builder.c", "cassandra");

        ADD_SOURCES(configure_module_dirname + "/util",
            "bytes.c " +
            "collections.c " +
            "consistency.c " +
            "future.c " +
            "inet.c " +
            "math.c " +
            "ref.c " +
            "result.c " +
            "uuid_gen.c", "cassandra");

        ADD_FLAG("LDFLAGS_CASSANDRA",
            "/INCREMENTAL:NO " +
            "/LTCG " +
            "/NODEFAULTLIB:LIBCMT.LIB " +
            "/NODEFAULTLIB:LIBCMTD.LIB");
        ADD_FLAG("CFLAGS_CASSANDRA",
            "/I " + configure_module_dirname + " " +
            "/I " + PHP_CASSANDRA_CPP_DRIVER + "/include " +
            "/I " + PHP_LIBUV_LIBS + "/include " +
            "/I " + PHP_MPIR + "/include " +
            "/I " + configure_module_dirname + "/src/Cassandra " +
            "/I " + configure_module_dirname + "/util " +
            "/DCASS_STATIC " +
            "/wd4267");

        // Determine if MSVC++ stdint definitions should be disabled
        if(PHP_VERSION == "5" && PHP_MINOR_VERSION <= 4) {
          ADD_FLAG("CFLAGS_CASSANDRA",
              "/DDISABLE_MSVC_STDINT");
        }

        // Ensure gdi32.lib is linked for all dependency extensions
        ADD_FLAG("LIBS", "gdi32.lib");
      } else {
        ERROR("Unable to add dependency spl");
      }
    } else {
      ERROR("Unable to locate MPIR");
    }
  } else {
    ERROR("Unable to locate DataStax C/C++ driver or its dependencies");
  }
}

